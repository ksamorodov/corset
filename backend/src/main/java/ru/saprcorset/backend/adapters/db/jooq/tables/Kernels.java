/*
 * This file is generated by jOOQ.
 */
package ru.saprcorset.backend.adapters.db.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.saprcorset.backend.adapters.db.jooq.Keys;
import ru.saprcorset.backend.adapters.db.jooq.Public;
import ru.saprcorset.backend.adapters.db.jooq.tables.records.KernelsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kernels extends TableImpl<KernelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.kernels</code>
     */
    public static final Kernels KERNELS = new Kernels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KernelsRecord> getRecordType() {
        return KernelsRecord.class;
    }

    /**
     * The column <code>public.kernels.id</code>.
     */
    public final TableField<KernelsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.kernels.kernel_size</code>.
     */
    public final TableField<KernelsRecord, BigDecimal> KERNEL_SIZE = createField(DSL.name("kernel_size"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.kernels.cross_sectional_area</code>.
     */
    public final TableField<KernelsRecord, BigDecimal> CROSS_SECTIONAL_AREA = createField(DSL.name("cross_sectional_area"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.kernels.elastic_modulus</code>.
     */
    public final TableField<KernelsRecord, BigDecimal> ELASTIC_MODULUS = createField(DSL.name("elastic_modulus"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.kernels.allowable_stress</code>.
     */
    public final TableField<KernelsRecord, BigDecimal> ALLOWABLE_STRESS = createField(DSL.name("allowable_stress"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.kernels.concentrated_load</code>.
     */
    public final TableField<KernelsRecord, BigDecimal> CONCENTRATED_LOAD = createField(DSL.name("concentrated_load"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.kernels.linear_voltage</code>.
     */
    public final TableField<KernelsRecord, BigDecimal> LINEAR_VOLTAGE = createField(DSL.name("linear_voltage"), SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.kernels.constructions_id</code>.
     */
    public final TableField<KernelsRecord, Integer> CONSTRUCTIONS_ID = createField(DSL.name("constructions_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private Kernels(Name alias, Table<KernelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kernels(Name alias, Table<KernelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.kernels</code> table reference
     */
    public Kernels(String alias) {
        this(DSL.name(alias), KERNELS);
    }

    /**
     * Create an aliased <code>public.kernels</code> table reference
     */
    public Kernels(Name alias) {
        this(alias, KERNELS);
    }

    /**
     * Create a <code>public.kernels</code> table reference
     */
    public Kernels() {
        this(DSL.name("kernels"), null);
    }

    public <O extends Record> Kernels(Table<O> child, ForeignKey<O, KernelsRecord> key) {
        super(child, key, KERNELS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<KernelsRecord, Integer> getIdentity() {
        return (Identity<KernelsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<KernelsRecord> getPrimaryKey() {
        return Keys.KERNELS_PK;
    }

    @Override
    public List<ForeignKey<KernelsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.KERNELS__KERNELS_CONSTRUCTIONS_ID_FKEY);
    }

    private transient Constructions _constructions;

    public Constructions constructions() {
        if (_constructions == null)
            _constructions = new Constructions(this, Keys.KERNELS__KERNELS_CONSTRUCTIONS_ID_FKEY);

        return _constructions;
    }

    @Override
    public Kernels as(String alias) {
        return new Kernels(DSL.name(alias), this);
    }

    @Override
    public Kernels as(Name alias) {
        return new Kernels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kernels rename(String name) {
        return new Kernels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kernels rename(Name name) {
        return new Kernels(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
