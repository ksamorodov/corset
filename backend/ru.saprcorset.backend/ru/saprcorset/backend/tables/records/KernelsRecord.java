/*
 * This file is generated by jOOQ.
 */
package ru.saprcorset.backend.tables.records;


import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

import ru.saprcorset.backend.tables.Kernels;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KernelsRecord extends UpdatableRecordImpl<KernelsRecord> implements Record7<Integer, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.kernels.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.kernels.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.kernels.kernel_size</code>.
     */
    public void setKernelSize(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.kernels.kernel_size</code>.
     */
    public BigDecimal getKernelSize() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>public.kernels.crosssectionalarea</code>.
     */
    public void setCrosssectionalarea(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.kernels.crosssectionalarea</code>.
     */
    public BigDecimal getCrosssectionalarea() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>public.kernels.elasticmodulus</code>.
     */
    public void setElasticmodulus(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.kernels.elasticmodulus</code>.
     */
    public BigDecimal getElasticmodulus() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.kernels.allowablestress</code>.
     */
    public void setAllowablestress(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.kernels.allowablestress</code>.
     */
    public BigDecimal getAllowablestress() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.kernels.concentratedload</code>.
     */
    public void setConcentratedload(BigDecimal value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.kernels.concentratedload</code>.
     */
    public BigDecimal getConcentratedload() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.kernels.linearvoltage</code>.
     */
    public void setLinearvoltage(BigDecimal value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.kernels.linearvoltage</code>.
     */
    public BigDecimal getLinearvoltage() {
        return (BigDecimal) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal, BigDecimal> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Kernels.KERNELS.ID;
    }

    @Override
    public Field<BigDecimal> field2() {
        return Kernels.KERNELS.KERNEL_SIZE;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Kernels.KERNELS.CROSSSECTIONALAREA;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Kernels.KERNELS.ELASTICMODULUS;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Kernels.KERNELS.ALLOWABLESTRESS;
    }

    @Override
    public Field<BigDecimal> field6() {
        return Kernels.KERNELS.CONCENTRATEDLOAD;
    }

    @Override
    public Field<BigDecimal> field7() {
        return Kernels.KERNELS.LINEARVOLTAGE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public BigDecimal component2() {
        return getKernelSize();
    }

    @Override
    public BigDecimal component3() {
        return getCrosssectionalarea();
    }

    @Override
    public BigDecimal component4() {
        return getElasticmodulus();
    }

    @Override
    public BigDecimal component5() {
        return getAllowablestress();
    }

    @Override
    public BigDecimal component6() {
        return getConcentratedload();
    }

    @Override
    public BigDecimal component7() {
        return getLinearvoltage();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public BigDecimal value2() {
        return getKernelSize();
    }

    @Override
    public BigDecimal value3() {
        return getCrosssectionalarea();
    }

    @Override
    public BigDecimal value4() {
        return getElasticmodulus();
    }

    @Override
    public BigDecimal value5() {
        return getAllowablestress();
    }

    @Override
    public BigDecimal value6() {
        return getConcentratedload();
    }

    @Override
    public BigDecimal value7() {
        return getLinearvoltage();
    }

    @Override
    public KernelsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public KernelsRecord value2(BigDecimal value) {
        setKernelSize(value);
        return this;
    }

    @Override
    public KernelsRecord value3(BigDecimal value) {
        setCrosssectionalarea(value);
        return this;
    }

    @Override
    public KernelsRecord value4(BigDecimal value) {
        setElasticmodulus(value);
        return this;
    }

    @Override
    public KernelsRecord value5(BigDecimal value) {
        setAllowablestress(value);
        return this;
    }

    @Override
    public KernelsRecord value6(BigDecimal value) {
        setConcentratedload(value);
        return this;
    }

    @Override
    public KernelsRecord value7(BigDecimal value) {
        setLinearvoltage(value);
        return this;
    }

    @Override
    public KernelsRecord values(Integer value1, BigDecimal value2, BigDecimal value3, BigDecimal value4, BigDecimal value5, BigDecimal value6, BigDecimal value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KernelsRecord
     */
    public KernelsRecord() {
        super(Kernels.KERNELS);
    }

    /**
     * Create a detached, initialised KernelsRecord
     */
    public KernelsRecord(Integer id, BigDecimal kernelSize, BigDecimal crosssectionalarea, BigDecimal elasticmodulus, BigDecimal allowablestress, BigDecimal concentratedload, BigDecimal linearvoltage) {
        super(Kernels.KERNELS);

        setId(id);
        setKernelSize(kernelSize);
        setCrosssectionalarea(crosssectionalarea);
        setElasticmodulus(elasticmodulus);
        setAllowablestress(allowablestress);
        setConcentratedload(concentratedload);
        setLinearvoltage(linearvoltage);
    }
}
